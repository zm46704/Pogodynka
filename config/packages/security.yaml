security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory:
            memory:
                users:
                    admin: {password: '$2y$13$Z1QAaUh6JFF6KI5jMyafw.ZP/uMrHgdrR5rzlT5fujSYLk.YQ0vOy', roles: ['ROLE_ADMIN']} //chmurka
                    cityDB: {password: '', roles: ['ROLE_ADMIN_CITY']}
                    dataDB: {password: '', roles: ['ROLE_ADMIN_DATA']}
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: users_in_memory
            #http_basic:
                #realm: My Secured Area
            form_login:
                login_path: app_login
                check_path: app_login
            logout:
                path: app_logout
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/city, roles: ROLE_ADMIN }
         - { path: ^/data, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    role_hierarchy:
        ROLE_ADMIN: [ROLE_CITY_SHOW, ROLE_DATA_SHOW]
        ROLE_ADMIN_CITY: [ROLE_CITY_NEW, ROLE_CITY_EDIT, ROLE_CITY_SHOW, ROLE_CITY_DELETE]
        ROLE_ADMIN_DATA: [ROLE_DATA_NEW, ROLE_DATA_EDIT, ROLE_DATA_SHOW, ROLE_DATA_DELETE]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
